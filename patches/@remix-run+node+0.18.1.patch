diff --git a/node_modules/@remix-run/node/globals.d.ts b/node_modules/@remix-run/node/globals.d.ts
index 738c36f..f389f49 100644
--- a/node_modules/@remix-run/node/globals.d.ts
+++ b/node_modules/@remix-run/node/globals.d.ts
@@ -4,12 +4,6 @@ import { sign, unsign } from "./cookieSigning";
 declare global {
     namespace NodeJS {
         interface Global {
-            atob: typeof atob;
-            btoa: typeof btoa;
-            Headers: typeof Headers;
-            Request: typeof Request;
-            Response: typeof Response;
-            fetch: typeof fetch;
             sign: typeof sign;
             unsign: typeof unsign;
         }
diff --git a/node_modules/@remix-run/node/globals.js b/node_modules/@remix-run/node/globals.js
index feb65ec..e98fdbc 100644
--- a/node_modules/@remix-run/node/globals.js
+++ b/node_modules/@remix-run/node/globals.js
@@ -3,20 +3,45 @@
 
 Object.defineProperty(exports, '__esModule', { value: true });
 
-var base64 = require('./base64.js');
-var cookieSigning = require('./cookieSigning.js');
 var fetch = require('./fetch.js');
 var nodeFetch = require('node-fetch');
 
+const encoder = new TextEncoder();
+
+// From @remix-run/server-runtime/cookieSigning.ts
+async function sign(value, secret) {
+  let key = await crypto.subtle.importKey("raw", encoder.encode(secret), { name: "HMAC", hash: "SHA-256" }, false, ["sign"]);
+  let data = encoder.encode(value);
+  let signature = await crypto.subtle.sign("HMAC", key, data);
+  let hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, "");
+
+  return value + "." + hash;
+}
+
+async function unsign(cookie, secret) {
+  let key = await crypto.subtle.importKey("raw", encoder.encode(secret), { name: "HMAC", hash: "SHA-256" }, false, ["verify"]);
+  let value = cookie.slice(0, cookie.lastIndexOf("."));
+  let hash = cookie.slice(cookie.lastIndexOf(".") + 1);
+  let data = encoder.encode(value);
+  let signature = byteStringToUint8Array(atob(hash));
+  let valid = await crypto.subtle.verify("HMAC", key, signature, data);
+
+  return valid ? value : false;
+}
+
+function byteStringToUint8Array(byteString) {
+  let array = new Uint8Array(byteString.length);
+
+  for (let i = 0; i < byteString.length; i++) {
+    array[i] = byteString.charCodeAt(i);
+  }
+
+  return array;
+}
+
 function installGlobals() {
-  global.atob = base64.atob;
-  global.btoa = base64.btoa;
-  global.Headers = nodeFetch.Headers;
-  global.Request = nodeFetch.Request;
-  global.Response = nodeFetch.Response;
-  global.fetch = fetch.fetch;
-  global.sign = cookieSigning.sign;
-  global.unsign = cookieSigning.unsign;
+  globalThis.sign = sign;
+  globalThis.unsign = unsign;
 }
 
 exports.installGlobals = installGlobals;
diff --git a/node_modules/@remix-run/node/index.js b/node_modules/@remix-run/node/index.js
index 2c6ff9d..c960e57 100644
--- a/node_modules/@remix-run/node/index.js
+++ b/node_modules/@remix-run/node/index.js
@@ -3,18 +3,20 @@
 
 Object.defineProperty(exports, '__esModule', { value: true });
 
-var errors = require('./errors.js');
 var fetch = require('./fetch.js');
 var globals = require('./globals.js');
-var fileStorage = require('./sessions/fileStorage.js');
 var nodeFetch = require('node-fetch');
 
 
 
-exports.formatServerError = errors.formatServerError;
+exports.formatServerError = function formatServerError() {
+  throw new Error('[Error] remix-worker-template: formatServerError is not supported on worker environment');
+};
 exports.fetch = fetch.fetch;
 exports.installGlobals = globals.installGlobals;
-exports.createFileSessionStorage = fileStorage.createFileSessionStorage;
+exports.createFileSessionStorage = function() {
+  throw new Error('[Error] remix-worker-template: createFileSessionStorage is not supported on worker environment');
+};
 Object.defineProperty(exports, 'Headers', {
   enumerable: true,
   get: function () {
