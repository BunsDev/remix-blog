diff --git a/node_modules/@remix-run/node/index.d.ts b/node_modules/@remix-run/node/index.d.ts
index 2f7f216..383aac9 100644
--- a/node_modules/@remix-run/node/index.d.ts
+++ b/node_modules/@remix-run/node/index.d.ts
@@ -1,8 +1,10 @@
 // Copyright Â© 2021 React Training LLC. All rights reserved.
 import "./assetImportTypes";
+import type { RequestHandler } from './server';
+import type { ServerBuild } from './build';
+import type { Request, Response } from './fetch';
+import type { AppLoadContext } from "./data";
 export type { ServerBuild, ServerEntryModule } from "./build";
-export type { CookieParseOptions, CookieSerializeOptions, CookieSignatureOptions, CookieOptions, Cookie } from "./cookies";
-export { createCookie, isCookie } from "./cookies";
 export type { AppLoadContext, AppData } from "./data";
 export type { EntryContext } from "./entry";
 export type { HeadersInit, RequestInfo, RequestInit, ResponseInit } from "./fetch";
@@ -13,8 +15,16 @@ export type { ActionFunction, ErrorBoundaryComponent, HeadersFunction, LinksFunc
 export { json, redirect } from "./responses";
 export type { RequestHandler } from "./server";
 export { createRequestHandler } from "./server";
-export type { SessionData, Session, SessionStorage, SessionIdStorageStrategy } from "./sessions";
-export { createSession, isSession, createSessionStorage } from "./sessions";
-export { createCookieSessionStorage } from "./sessions/cookieStorage";
-export { createFileSessionStorage } from "./sessions/fileStorage";
-export { createMemorySessionStorage } from "./sessions/memoryStorage";
+
+export interface GetLoadContextFunction {
+  (request: Request): AppLoadContext;
+}
+
+/**
+ * [Patched] Returns a request handler for Cloudflare worker that serves the response using Remix.
+ */
+export declare function createRequestHandler({ build, getLoadContext, mode }: {
+  build: ServerBuild;
+  getLoadContext?: GetLoadContextFunction;
+  mode?: string;
+}): (request: Request) => Promise<Response>;
diff --git a/node_modules/@remix-run/node/index.js b/node_modules/@remix-run/node/index.js
index 15cd54a..27d1eeb 100644
--- a/node_modules/@remix-run/node/index.js
+++ b/node_modules/@remix-run/node/index.js
@@ -3,32 +3,32 @@
 
 Object.defineProperty(exports, '__esModule', { value: true });
 
-var cookies = require('./cookies.js');
 var fetch = require('./fetch.js');
 var globals = require('./globals.js');
 var responses = require('./responses.js');
 var server = require('./server.js');
-var sessions = require('./sessions.js');
-var cookieStorage = require('./sessions/cookieStorage.js');
-var fileStorage = require('./sessions/fileStorage.js');
-var memoryStorage = require('./sessions/memoryStorage.js');
 var nodeFetch = require('node-fetch');
 
+function createRequestHandler({
+  build,
+  getLoadContext,
+  mode = process.env.NODE_ENV
+}) {
+  let handleRequest = server.createRequestHandler(build, mode);
 
+  return (request) => {
+    let loadContext =
+      typeof getLoadContext === "function" ? getLoadContext(request) : undefined;
+
+    return handleRequest(request, loadContext);
+  };
+}
 
-exports.createCookie = cookies.createCookie;
-exports.isCookie = cookies.isCookie;
 exports.fetch = fetch.fetch;
 exports.installGlobals = globals.installGlobals;
 exports.json = responses.json;
 exports.redirect = responses.redirect;
-exports.createRequestHandler = server.createRequestHandler;
-exports.createSession = sessions.createSession;
-exports.createSessionStorage = sessions.createSessionStorage;
-exports.isSession = sessions.isSession;
-exports.createCookieSessionStorage = cookieStorage.createCookieSessionStorage;
-exports.createFileSessionStorage = fileStorage.createFileSessionStorage;
-exports.createMemorySessionStorage = memoryStorage.createMemorySessionStorage;
+exports.createRequestHandler = createRequestHandler;
 Object.defineProperty(exports, 'Headers', {
   enumerable: true,
   get: function () {
